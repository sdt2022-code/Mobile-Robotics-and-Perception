% ======
% ROB521_assignment1.m
% ======
%
% This assignment will introduce you to the idea of motion planning for  
% holonomic robots that can move in any direction and change direction of 
% motion instantaneously.  Although unrealistic, it can work quite well for
% complex large scale planning.  You will generate mazes to plan through 
% and employ the PRM algorithm presented in lecture as well as any 
% variations you can invent in the later sections.
% 
% There are three questions to complete (5 marks each):
%
%    Question 1: implement the PRM algorithm to construct a graph
%    connecting start to finish nodes.
%    Question 2: find the shortest path over the graph by implementing the
%    Dijkstra's or A* algorithm.
%    Question 3: identify sampling, connection or collision checking 
%    strategies that can reduce runtime for mazes.
%
% Fill in the required sections of this script with your code, run it to
% generate the requested plots, then paste the plots into a short report
% that includes a few comments about what you've observed.  Append your
% version of this script to the report.  Hand in the report as a PDF file.
%
% requires: basic Matlab, 
%
% S L Waslander, January 2022
%
clear; close all; clc;

%set random seed for repeatability if desired
rng(1);

% ==========================
% Maze Generation
% ==========================
%
% The maze function returns a map object with all of the edges in the maze.
% Each row of the map structure draws a single line of the maze.  The
% function returns the lines with coordinates [x1 y1 x2 y2].
% Bottom left corner of maze is [0.5 0.5], 
% Top right corner is [col+0.5 row+0.5]
%

row = 5; % Maze rows
col = 7; % Maze columns
map = maze(row,col); % Creates the maze
start = [0.5, 1.0]; % Start at the bottom left
finish = [col+0.5, row]; % Finish at the top right

h = figure(1);clf; hold on;
plot(start(1), start(2),'go')
plot(finish(1), finish(2),'rx')
show_maze(map,row,col,h); % Draws the maze
drawnow;

% ======================================================
% Question 1: construct a PRM connecting start and finish
% ======================================================
%
% Using 500 samples, construct a PRM graph whose milestones stay at least 
% 0.1 units away from all walls, using the MinDist2Edges function provided for 
% collision detection.  Use a nearest neighbour connection strategy and the 
% CheckCollision function provided for collision checking, and find an 
% appropriate number of connections to ensure a connection from  start to 
% finish with high probability.


% variables to store PRM components
nS = 500;  % number of samples to try for milestone creation
milestones = [start; finish];  % each row is a point [x y] in feasible space
edges = [];  % each row is should be an edge of the form [x1 y1 x2 y2]

disp("Time to create PRM graph")
tic;
% ------insert your PRM generation code here-------

x = col * rand(1,nS)+0.5;
y = row * rand(1,nS)+0.5;
points = [x' y'];
weights = MinDist2Edges(points,map);

rowIndex = find(weights<0.1);
x([rowIndex]) = [];
y([rowIndex]) = [];

hold on;
scatter(x,y)
milestones = [start; x' y'; finish];
min_dist = 1000;
connection_number = 0;

%% Most efficient way to plot possible connections in C-space
tic;
shift = std(x);
for ii=1:8
    milestones_reset = milestones;
    test = milestones_reset(milestones_reset(:,1)<=ii & milestones_reset(:,1)>=ii-(1.1^ii)*shift , :);

    for kk = 1:length(test)
        for jj = 1:length(test)
            distance(kk,jj) = sqrt((test(kk,1)-test(jj,1))^2 + (test(kk,2)-test(jj ,2 ))^2);

        end
        [out , indx] = sort(distance(kk,:));
        indx = indx(1:15); %chose 15 nearest neighbours

        for rr=1:length(indx)

            [inCollision , edge] = CheckCollision(test(kk,:),test(indx(rr),:), map);

            if inCollision ==0
                hold on;
                plot([test(kk,1) test(indx(rr),1)] , [test(kk,2) test(indx(rr),2)])
                connection_number = connection_number+1;

            end
        end
    end
end


% ------end of your PRM generation code -------
toc;

figure(1);
plot(milestones(:,1),milestones(:,2),'m.');
if (~isempty(edges))
    line(edges(:,1:2:3)', edges(:,2:2:4)','Color','magenta') % line uses [x1 x2 y1 y2]
end
str = sprintf('Q1 - %d X %d Maze PRM', row, col);
title(str);
drawnow;

%print -dpng assignment1_q1.png

% =================================================================
% Question 2: Find the shortest path over the PRM graph
% =================================================================
%
% Using an optimal graph search method (Dijkstra's or A*) , find the 
% shortest path across the graph generated.  Please code your own 
% implementation instead of using any built in functions.

disp('Time to find shortest path');
tic;

% Variable to store shortest path
spath = []; % shortest path, stored as a milestone row index sequence


% ------insert your shortest path finding algorithm here-------

%% Distance (weights) and adjacency matrix.

% finding the distance matrix, Inf if points cause collision
% Adjacency matrix, 0 for no connection between both nodes and 1 for
% existing conection between both 

for i = 1:length(milestones)
    for j=1:length(milestones)
        if j==i
            dist_small(i,j) = 0;
            adj(i,j) = 0;
        
        elseif 1 == CheckCollision( milestones(i,:),milestones(j,:) ,map)
            dist_small(i,j) = 0;
            dist_small(j,i) = 0;
            adj(i,j) = 0;
            adj(j,i) = 0;

        else
            dist_small(i,j) = sqrt((milestones(i,1)-milestones(j,1))^2 + ((milestones(i,2)- milestones(j,2))^2));
            dist_small(j,i) = dist_small(i,j);
            adj(i,j) = 1;
            adj(j,i) = 1;
        end

    end
end

%% Djistra Algorithm

% after initialization;
% check if new distance is less than previous distance, and make sure we
% are not considering the distance from the visited node, to the same node.
% if distance is less than previous distance, add point to path s 
% s will look an array with the sequence of points that gets us from start
% to finish. 
%below forloop will draw the lines of sequence of points. 

start = 1; %start at node 1 of milestones 
finish = length(milestones); %finish at the last node of milestones

n = length(milestones);
visited_nodes(1:n) = 0;
dist(1:n) = Inf;
pred(1:n) = 0;
spath = [];
dist(start) = 1;
unvisited = 1:n;

while ~isempty(unvisited)
    [~,current] = min(dist(unvisited));
    current = unvisited(current);

    if current == finish
        break;
    end

    unvisited = setdiff(unvisited, current);

    %update distance to all neighbors 
    neighbors = find(adj(current,:));

    for i=1:length(neighbors)
        neighbor = neighbors(i);

        if dist(neighbor)>dist(current) + dist_small(current,neighbor)
            dist(neighbor) = dist(current) + dist_small(current,neighbor);
            pred(neighbor) = current;

        end
    end
end

if pred(finish)~=0
   p = finish;
   i=1;
   while p ~= start
       spath(i) = p;
       p = pred(p);
       i = i+1;
   end

end
  spath = [1 fliplr(spath(1:i-1))];

% ------end of shortest path finding algorithm------- 
toc;    


% plot the shortest path
figure(1);
for i=1:length(spath)-1
    plot(milestones(spath(i:i+1),1),milestones(spath(i:i+1),2), 'go-', 'LineWidth',3);
end
str = sprintf('Q2 - %d X %d Maze Shortest Path', row, col);
title(str);
drawnow;

%print -dpng assingment1_q2.png


% ================================================================
% Question 3: find a faster way
% ================================================================
%
% Modify your milestone generation, edge connection, collision detection 
% and/or shortest path methods to reduce runtime.  What is the largest maze 
% for which you can find a shortest path from start to goal in under 20 
% seconds on your computer? (Anything larger than 40x40 will suffice for 
% full marks)


row = 25;
col = 25;
map = maze(row,col);
start = [0.5, 1.0];
finish = [col+0.5, row];
milestones = [start; finish];  % each row is a point [x y] in feasible space
edges = [];  % each row is should be an edge of the form [x1 y1 x2 y2]

h = figure(2);clf; hold on;
plot(start(1), start(2),'go')
plot(finish(1), finish(2),'rx')
show_maze(map,row,col,h); % Draws the maze
drawnow;

fprintf("Attempting large %d X %d maze... \n", row, col);
tic;        
% ------insert your optimized algorithm here------

nS = 2000;  % number of samples to try for milestone creation  % each row is a point [x y] in feasible space

% ------insert your PRM generation code here-------


%% Uniform point generation 

X = zeros(row, col);
X(:,1) = zeros(row,1);
 
for i = 1:col
X(:,i) = (i)*ones(row,1);

end

Y = 1;
 for i = 2: col
     Y = [Y ; i];
 end

milestones_large =[];
 for i = 1:length(X)
%      hold on;
%      scatter(X(:,i) , Y, "*" , "black")
     milestones_large = [ milestones_large ; X(:,i) Y] ;
 end


%% Finding adjasency and distance matrix (both are equal in this case)
n = length(milestones_large) ;
adj_test = zeros(n , n);

for i = 1:n

    adj_test(i,i) = 0;

    if i~=n
        if 0 == CheckCollision(milestones_large(i,:), milestones_large(i+1 , :) , map)
            adj_test(i,i+1) = 1;
        end
    end

    if i~=1
        if  0 == CheckCollision(milestones_large(i,:) , milestones_large(i-1 , :), map)
            adj_test(i,i-1) = 1;
        end
    end

    if i< n-length(Y)

        if 0 == CheckCollision(milestones_large(i,:), milestones_large(i+length(Y) , :) , map)
            adj_test(i,length(Y)+i) = 1;
        end
    end

end


adj_test = adj_test+adj_test';


%% Djistra algorithm for Large maze.

start = 1; %start at node 1 of milestones 
finish = length(milestones_large); %finish at the last node of milestones
distance_test = adj_test;

n = length(milestones_large);
visited_nodes(1:n) = 0;
dist(1:n) = Inf;
pred(1:n) = 0;
spath_large = [];
dist(start) = 1;
unvisited = 1:n;

while ~isempty(unvisited)
    [~,current] = min(dist(unvisited));
    current = unvisited(current);

    if current == finish
        break;
    end

    unvisited = setdiff(unvisited, current);

    %update distance to all neighbors 
    neighbors = find(adj_test(current,:));

    for i=1:length(neighbors)
        neighbor = neighbors(i);

        if dist(neighbor)>dist(current) + distance_test(current,neighbor)
            dist(neighbor) = dist(current) + distance_test(current,neighbor);
            pred(neighbor) = current;

        end
    end
end

if pred(finish)~=0
   p = finish;
   i=1;
   while p ~= start
       spath_large(i) = p;
       p = pred(p);
       i = i+1;
   end
end

spath_large = fliplr(spath_large(1:i-1));


% ------end of your optimized algorithm-------
dt = toc;

start = [0.5, 1.0];
finish = [col+0.5, row];

figure(2); hold on;
plot(milestones_large(:,1),milestones_large(:,2),'m.');
if (~isempty(edges))
    line(edges(:,1:2:3)', edges(:,2:2:4)','Color','magenta')
end


if (~isempty(spath_large))
    for i=1:length(spath_large)-1
        plot(milestones_large(spath_large(i:i+1),1),milestones_large(spath_large(i:i+1),2), 'go-', 'LineWidth',3);
    end

plot([start(1) milestones_large(spath_large(1),1)] , [start(2) milestones_large(spath_large(1),2)], 'go-', 'LineWidth',3)
plot([finish(1) milestones_large(spath_large(end),1)] , [finish(2) milestones_large(spath_large(end),2)], 'go-', 'LineWidth',3)

end
str = sprintf('Q3 - %d X %d Maze solved in %f seconds', row, col, dt);
title(str);

% print -dpng assignment1_q3.png

